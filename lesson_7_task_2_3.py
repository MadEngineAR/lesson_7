from random import randint
from timeit import timeit
from statistics import median
"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.
Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.
Решите задачу тремя способами:
3) с помощью встроенной функции поиска медианы
сделайте замеры на массивах длиной 10, 100, 1000 элементов
В конце сделайте аналитику какой трех из способов оказался эффективнее
"""


# замеры 10
m = 5
lst = [randint(-100, 100) for _ in range(2 * m + 1)]
print(median(lst[:]))
print(
    timeit(
        "median(lst[:])",
        globals=globals(),
        number=1000))
# замеры 100 - median
m = 50
lst = [randint(-100, 100) for _ in range(2 * m + 1)]
print(median(lst[:]))
print(
    timeit(
        "median(lst[:])",
        globals=globals(),
        number=1000))

m = 500
lst = [randint(-100, 100) for _ in range(2 * m + 1)]
print(median(lst[:]))
print(
    timeit(
        "median(lst[:])",
        globals=globals(),
        number=1000))

"""
Результаты встроенной функции median * Результаты no_sort                      * Результаты median_shell_sort
-26 замер 10                         * Медиана массива no_sort 0 - замер 10    * Медиана массива -8 - замер 10 
0.0008217000000000085                * 0.004508700000000004                    * 0.008629600000000001
-5 замер 100                         * Медиана массива no_sort 4 - замер 100   * Медиана массива 13 - замер 100
0.008596799999999988                 * 0.11332199999999999                     * 0.20786290000000002
6  замер 1000                        * Медиана массива no_sort -4 - замер 1000 * Медиана массива -5
0.1282237                            * 10.753666500000001                      * 3.8831412999999997

Результаты профилирования по времени 3х функций говорят о том, что встроенная фуннкция быстрее на всех трех величинах
массива. Но метод без сортировки показывает более высокие результаты на малых величинах массива в сравнении 
с сортировкой Шелла. Но на больших величинах массива заметно проигрывает методу сортировки Шелла(в 3 раза медленнее).
Вывод: Эффективнее оказался встроенный метод.
"""